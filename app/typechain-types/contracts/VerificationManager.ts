/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VerificationManager {
  export type VerificationRequestStruct = {
    id: BigNumberish;
    user: AddressLike;
    resumeId: BigNumberish;
    entryId: string;
    organization: AddressLike;
    details: string;
    status: BigNumberish;
    timestamp: BigNumberish;
    verificationDetails: string;
  };

  export type VerificationRequestStructOutput = [
    id: bigint,
    user: string,
    resumeId: bigint,
    entryId: string,
    organization: string,
    details: string,
    status: bigint,
    timestamp: bigint,
    verificationDetails: string
  ] & {
    id: bigint;
    user: string;
    resumeId: bigint;
    entryId: string;
    organization: string;
    details: string;
    status: bigint;
    timestamp: bigint;
    verificationDetails: string;
  };
}

export interface VerificationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_VERIFICATION_DURATION"
      | "addOrganization"
      | "approveRequest"
      | "createVerificationRequest"
      | "getOrgRequests"
      | "getOrganizationAtIndex"
      | "getOrganizationCount"
      | "getOrganizationDetails"
      | "getPendingRequestsForOrg"
      | "getRequest"
      | "getUserRequests"
      | "isVerifiedOrganization"
      | "orgRequestCount"
      | "owner"
      | "rejectRequest"
      | "removeOrganization"
      | "renounceOwnership"
      | "requestCount"
      | "requests"
      | "resumeEntryRequests"
      | "revokeOrganization"
      | "transferOwnership"
      | "userRequestCount"
      | "verifyOrganization"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OrganizationAdded"
      | "OrganizationRemoved"
      | "OrganizationRevoked"
      | "OrganizationVerified"
      | "OwnershipTransferred"
      | "RequestApproved"
      | "RequestCreated"
      | "RequestRejected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_VERIFICATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOrganization",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVerificationRequest",
    values: [AddressLike, BigNumberish, string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrgRequests",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequestsForOrg",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orgRequestCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeEntryRequests",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequestCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrganization",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_VERIFICATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVerificationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrgRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequestsForOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orgRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeEntryRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrganization",
    data: BytesLike
  ): Result;
}

export namespace OrganizationAddedEvent {
  export type InputTuple = [
    organization: AddressLike,
    name: string,
    email: string,
    website: string
  ];
  export type OutputTuple = [
    organization: string,
    name: string,
    email: string,
    website: string
  ];
  export interface OutputObject {
    organization: string;
    name: string;
    email: string;
    website: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationRemovedEvent {
  export type InputTuple = [organization: AddressLike];
  export type OutputTuple = [organization: string];
  export interface OutputObject {
    organization: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationRevokedEvent {
  export type InputTuple = [organization: AddressLike];
  export type OutputTuple = [organization: string];
  export interface OutputObject {
    organization: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationVerifiedEvent {
  export type InputTuple = [organization: AddressLike];
  export type OutputTuple = [organization: string];
  export interface OutputObject {
    organization: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestApprovedEvent {
  export type InputTuple = [
    id: BigNumberish,
    organization: AddressLike,
    verificationDetails: string
  ];
  export type OutputTuple = [
    id: bigint,
    organization: string,
    verificationDetails: string
  ];
  export interface OutputObject {
    id: bigint;
    organization: string;
    verificationDetails: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    organization: AddressLike,
    resumeId: BigNumberish,
    entryId: string,
    details: string
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    organization: string,
    resumeId: bigint,
    entryId: string,
    details: string
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    organization: string;
    resumeId: bigint;
    entryId: string;
    details: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestRejectedEvent {
  export type InputTuple = [
    id: BigNumberish,
    organization: AddressLike,
    reason: string
  ];
  export type OutputTuple = [id: bigint, organization: string, reason: string];
  export interface OutputObject {
    id: bigint;
    organization: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VerificationManager extends BaseContract {
  connect(runner?: ContractRunner | null): VerificationManager;
  waitForDeployment(): Promise<this>;

  interface: VerificationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_VERIFICATION_DURATION: TypedContractMethod<[], [bigint], "view">;

  addOrganization: TypedContractMethod<
    [
      _organization: AddressLike,
      _name: string,
      _email: string,
      _website: string
    ],
    [void],
    "nonpayable"
  >;

  approveRequest: TypedContractMethod<
    [requestId: BigNumberish, verificationDetails: string],
    [void],
    "nonpayable"
  >;

  createVerificationRequest: TypedContractMethod<
    [
      user: AddressLike,
      resumeId: BigNumberish,
      entryId: string,
      organization: AddressLike,
      details: string
    ],
    [bigint],
    "nonpayable"
  >;

  getOrgRequests: TypedContractMethod<
    [org: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getOrganizationAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getOrganizationCount: TypedContractMethod<[], [bigint], "view">;

  getOrganizationDetails: TypedContractMethod<
    [_organization: AddressLike],
    [
      [string, string, string, boolean, bigint, bigint, boolean] & {
        name: string;
        email: string;
        website: string;
        verifiedStatus: boolean;
        verificationTimestamp: bigint;
        lastUpdateTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getPendingRequestsForOrg: TypedContractMethod<
    [org: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [VerificationManager.VerificationRequestStructOutput],
    "view"
  >;

  getUserRequests: TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  isVerifiedOrganization: TypedContractMethod<
    [_organization: AddressLike],
    [boolean],
    "view"
  >;

  orgRequestCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rejectRequest: TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  removeOrganization: TypedContractMethod<
    [_organization: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestCount: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        user: string;
        resumeId: bigint;
        entryId: string;
        organization: string;
        details: string;
        status: bigint;
        timestamp: bigint;
        verificationDetails: string;
      }
    ],
    "view"
  >;

  resumeEntryRequests: TypedContractMethod<
    [arg0: BigNumberish, arg1: string],
    [bigint],
    "view"
  >;

  revokeOrganization: TypedContractMethod<
    [_organization: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userRequestCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  verifyOrganization: TypedContractMethod<
    [_organization: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_VERIFICATION_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addOrganization"
  ): TypedContractMethod<
    [
      _organization: AddressLike,
      _name: string,
      _email: string,
      _website: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, verificationDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVerificationRequest"
  ): TypedContractMethod<
    [
      user: AddressLike,
      resumeId: BigNumberish,
      entryId: string,
      organization: AddressLike,
      details: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrgRequests"
  ): TypedContractMethod<
    [org: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getOrganizationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrganizationDetails"
  ): TypedContractMethod<
    [_organization: AddressLike],
    [
      [string, string, string, boolean, bigint, bigint, boolean] & {
        name: string;
        email: string;
        website: string;
        verifiedStatus: boolean;
        verificationTimestamp: bigint;
        lastUpdateTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingRequestsForOrg"
  ): TypedContractMethod<
    [org: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [VerificationManager.VerificationRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRequests"
  ): TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifiedOrganization"
  ): TypedContractMethod<[_organization: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "orgRequestCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeOrganization"
  ): TypedContractMethod<[_organization: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string
      ] & {
        id: bigint;
        user: string;
        resumeId: bigint;
        entryId: string;
        organization: string;
        details: string;
        status: bigint;
        timestamp: bigint;
        verificationDetails: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resumeEntryRequests"
  ): TypedContractMethod<[arg0: BigNumberish, arg1: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeOrganization"
  ): TypedContractMethod<[_organization: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userRequestCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyOrganization"
  ): TypedContractMethod<[_organization: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OrganizationAdded"
  ): TypedContractEvent<
    OrganizationAddedEvent.InputTuple,
    OrganizationAddedEvent.OutputTuple,
    OrganizationAddedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationRemoved"
  ): TypedContractEvent<
    OrganizationRemovedEvent.InputTuple,
    OrganizationRemovedEvent.OutputTuple,
    OrganizationRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationRevoked"
  ): TypedContractEvent<
    OrganizationRevokedEvent.InputTuple,
    OrganizationRevokedEvent.OutputTuple,
    OrganizationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationVerified"
  ): TypedContractEvent<
    OrganizationVerifiedEvent.InputTuple,
    OrganizationVerifiedEvent.OutputTuple,
    OrganizationVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestApproved"
  ): TypedContractEvent<
    RequestApprovedEvent.InputTuple,
    RequestApprovedEvent.OutputTuple,
    RequestApprovedEvent.OutputObject
  >;
  getEvent(
    key: "RequestCreated"
  ): TypedContractEvent<
    RequestCreatedEvent.InputTuple,
    RequestCreatedEvent.OutputTuple,
    RequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestRejected"
  ): TypedContractEvent<
    RequestRejectedEvent.InputTuple,
    RequestRejectedEvent.OutputTuple,
    RequestRejectedEvent.OutputObject
  >;

  filters: {
    "OrganizationAdded(address,string,string,string)": TypedContractEvent<
      OrganizationAddedEvent.InputTuple,
      OrganizationAddedEvent.OutputTuple,
      OrganizationAddedEvent.OutputObject
    >;
    OrganizationAdded: TypedContractEvent<
      OrganizationAddedEvent.InputTuple,
      OrganizationAddedEvent.OutputTuple,
      OrganizationAddedEvent.OutputObject
    >;

    "OrganizationRemoved(address)": TypedContractEvent<
      OrganizationRemovedEvent.InputTuple,
      OrganizationRemovedEvent.OutputTuple,
      OrganizationRemovedEvent.OutputObject
    >;
    OrganizationRemoved: TypedContractEvent<
      OrganizationRemovedEvent.InputTuple,
      OrganizationRemovedEvent.OutputTuple,
      OrganizationRemovedEvent.OutputObject
    >;

    "OrganizationRevoked(address)": TypedContractEvent<
      OrganizationRevokedEvent.InputTuple,
      OrganizationRevokedEvent.OutputTuple,
      OrganizationRevokedEvent.OutputObject
    >;
    OrganizationRevoked: TypedContractEvent<
      OrganizationRevokedEvent.InputTuple,
      OrganizationRevokedEvent.OutputTuple,
      OrganizationRevokedEvent.OutputObject
    >;

    "OrganizationVerified(address)": TypedContractEvent<
      OrganizationVerifiedEvent.InputTuple,
      OrganizationVerifiedEvent.OutputTuple,
      OrganizationVerifiedEvent.OutputObject
    >;
    OrganizationVerified: TypedContractEvent<
      OrganizationVerifiedEvent.InputTuple,
      OrganizationVerifiedEvent.OutputTuple,
      OrganizationVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestApproved(uint256,address,string)": TypedContractEvent<
      RequestApprovedEvent.InputTuple,
      RequestApprovedEvent.OutputTuple,
      RequestApprovedEvent.OutputObject
    >;
    RequestApproved: TypedContractEvent<
      RequestApprovedEvent.InputTuple,
      RequestApprovedEvent.OutputTuple,
      RequestApprovedEvent.OutputObject
    >;

    "RequestCreated(uint256,address,address,uint256,string,string)": TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;
    RequestCreated: TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;

    "RequestRejected(uint256,address,string)": TypedContractEvent<
      RequestRejectedEvent.InputTuple,
      RequestRejectedEvent.OutputTuple,
      RequestRejectedEvent.OutputObject
    >;
    RequestRejected: TypedContractEvent<
      RequestRejectedEvent.InputTuple,
      RequestRejectedEvent.OutputTuple,
      RequestRejectedEvent.OutputObject
    >;
  };
}
